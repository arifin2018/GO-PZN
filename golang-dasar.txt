1.  Membuat project
untuk membuat module kita bisa pake command
--go mod init (biasanya sama dengan nama project/foldernya)- 
--go mod init GO-PZN--

2. Membuat Hello world
- touch helloworld.go
package main --> tulisan `package` harus kecil semua karna case sensitive (huruf nya case sensitive)

import "fmt" --> fungsi import ini ketika kita ingin mengambil library (huruf nya case sensitive)

func main()  { --> function main,function pertama kali di jalankan
    fmt.Println("hello world") -->ini untuk mencetak string (huruf nya case sensitive)
}
/**
untuk running nya bisa pake 
`go run helloworld.go`
atau
`go build` 

perbedaan nya adalah 
- go run hanya menjalankan 1 file
- go build dia akan build dulu ke binary file lalu filenya bisa dijalankan 
*/

3. Multiple Main Function
Golang tidak memperbolehkan kita membuat nama function yang sama, di dalam satu project atau di dalam satu module
    contoh di dalam file : 
- a.go ada function Main()
- b.go ada function Main()

karna 2 function ini namanya sama Main() Main(),walaupun beda file maka ini tidak diperbolehkan(forbidden)

4. Tipe data number
    - integer
    - Floating Point

- tipe data integer(1)
dia masih menerima nilai minimum di angka minus
- tipe data integer(2)
dia tidak menerima nilai minimum angka minus

4. Tipe data bool
tipe data bool hanya ada true dan false

5. Tipe data string
- string adalah tipe data kumpulan karakter, dari karakter huruf kosong sampe tak terhingga
- function string :
len("string") = adalah function untuk menghitung panjangnya string/kata termasuk spasi juga di hitung
"string"[0] = pengambilan huruf dari string di index ke 0. akan tetapi ini akan mengambalikan nilai byte/angka

6. variable
- variable adalah tempat untuk menyimpan data dan wajib digunakan saat kita mendeklarasinya 
- saat kita membuat variable kita wajib menyertakan tipe datanya
    var name string

- akan tetapi jika kita langsung inisialisasi data pada variable nya,maka tidak perlu lagi untuk menyertakan tipe datanya
    var name = "arifin" 

- unik-nya di golang untuk menulis kata `var` membuat variable tidak lah wajib asalkan kita bisa sertakan datanya
    name := "arifin"

- di golang bisa juga membuat/mendeklarasi multiple variable sekaligus ini akan lebih baik untuk kedepannya
    var (
		firstname = "nur"
		lastname = "arifin"
	)

7. constant
- constant sama seperti variable untuk menyimpan data, AKAN TETAPI constant tidak boleh di rubah value/datanya,dan tidak error jika tidak digunakan
- di golang bisa juga membuat/mendeklarasi multiple constant sekaligus ini akan lebih baik untuk kedepannya
    const (
		firstname = "nur"
		lastname = "arifin"
	)

8. konversi tipe data
- ketika kita ingin mengambil huruf dari string,balikannya tidak langsung huruf melainkan byte of int
  solusinya adalah perlu di konversi dulu ke string() supaya bisa menjadi huruf

9. type declarations
- Type Declarations adalah kemampuan membuat ulang tipe data baru dari tipe data yang sudah ada
- Type Declarations biasanya digunakan untuk membuat alias terhadap tipe data yang sudah ada, dengan tujuan agar lebih mudah dimengerti

10. Operasi Matematika
- operasi matematika wajib untuk tipe data number 
    var matematika = 10 + 10
    fmt.Println(matematika) //20
- augmented assigment = ini untuk menambah variable yang sudah ada nilainya
    var matematika2 = 10
    matematika2 += 10 // matematika2 = matematika2 + 10
    fmt.Println(matematika2) //20

11. Operasi Perbandingan
- operasi yang membandingkan 2 buah tipe data biasanya tipe data int untuk kurang dari dan lebih dari
- operasi Perbandingan akan mengembalikan nilai boolean (true or false)
    "Arifin" == "arifin" //false
    "Arifin" == "Arifin" //true

    "Arifin" > "arifin" //false
    "Arifin" > "Arifin" //false
    
    "Arifin" >= "arifin" //false
    "Arifin" >= "Arifin" //true

    "a" > "b" //false
    "b" > "a" //true (karena B lebih besar / lebih dulu dari pada A)

    "b" > "B" //true (karena b(kecil) lebih besar / lebih dulu dari pada B(besar))

12. Operasi boolean

13. Tipe data array
- array adalah kumpulan data yang ber-isikan tipe data yang sama
    misalkan kita set di tipe data string,maka semuanya wajib string
    dan nilai panjang nya harus di set di awal
- di array juga default value nya adalah 0 
- untuk melihat panjang array nya bisa menggunakan len(array)
- di golang kita tidak bisa menghapus nilai di array atau di unset seperti di php itu tidak ada dan tidak bisa
- cara penulisan array ada 2 macam
    - `var names [2]string
        names[0] = "nur"
        names[1] = "arifin"
        fmt.Println(names)`

    - `var names [2]string = [2]string{
        "nur",
        "arifin",
    }`

    - `var names = [2]string{
        "nur",
        "arifin",
    }`

14. tipe data slice
- Tipe data slice mirip seperti tipe data array, hanya saja tipe data slice dia ukuran-nya bisa berubah berubah seperti array di PHP
- ada 3 data penting di slice yaitu: pointer,length,capacity
    - pointer = adalah petunjuk data awalnya (mau dari berapa)[pointer:capacity]
    - length = panjang slice
    - capacity = adalah petunjuk data akhirnya (mau sampe berapa)[pointer:capacity]
- kalo kita perhatikan pada contoh di slice ini,sebenarnya slice hanya menunjuk untuk melakukan perubahan pada data yang sudah ada
    misalkan data nya sudah ada `
        var names = [...]string{"azriel","rafiq","pradipta","khoirunnisa","miftahul","jannah"}
        
        nameSliceKhoirunnisa := names[3:]
        nameSliceKhoirunnisa[1] = "MJ"
        fmt.Println(nameSliceKhoirunnisa) //[khoirunnisa MJ jannah]
        fmt.Println(names) //[azriel rafiq pradipta khoirunnisa MJ jannah]
    ` data pada names sudah terubah yang tadinya 'miftahul' menjadi 'MJ',padahal kita rubah di variable 'nameSliceKhoirunnisa'
    itu karena kita menggunakan slice yang mengambil data dari array names maka dari itu dia(variable names) ikut berubah

15. tipe data mep
- map adalah tipe data lain yang berisikan kumpulan data yang sama namun kita bisa menentukan key yang bisa kita inginkan
- tidak ada batasan untuk data map bisa sebanyak banyak nya,asalkan key nya berbeda
- jika kita menggunakan key yang sama,maka key yang sudah ada datanya akan ketiban

16. if else expression
- if expression adalah salah satu kunci percabangan,yang artinya hanya bisa di eksekusi jika nilainya bertipe true
- else expression jika if nya gagal maka dia akan lari ke else expression
- else if expression adalah untuk menambah kondisi lagi jika dibutuhkan

17. switch case

18. for loop
- for tanpa statment
- for dengan statment = perlu menambahkan 2 statment untuk for nya,for i := 1; i < 10; i++
    - i := 1; //init statment
    - i < 10; //kondisi statment
    - i++; //increment statment
- for range
    - dengan data array jika ingin mengambil value secara langsung tanpa melakukan indexing

19. break and continue
- break adalah untuk menghentikan program yang sedang berjalan
- continue adalah untuk melewati kondisi yang ada

20. Function
- function adalah sebuah block kode yang segaja digunakan agar program kita dapat digunakan berulang ulang
- cara membuat func sangat sederhana,hanya dengan cara menggunakan kata kunci func dan nama function nya lalu block kode isi function
- namun nama function tidak boleh menggunakan spasi 

21. Function parameter
- function parameter tidaklah wajib namun akan tetapi jika dibutuhkan kita harus membawa data parameternya

22. Function return value
- kita harus membuat function yang mengembalikan data dengan menulis kata return dan mendeklarasi tipe data di samping function

23. Function return multiple value
- di golang kita bisa mengembalikan beberapa value,bisa sebanyak banyaknya contohnya seperti ini
- jika kita ingin tidak mengambil nilainya cukup gunakan _(underscore) pada variable

24. variadic variable (varargs - variable arguments)
- varargs bisa menerima lebih dari satu input,mirip seprti array
- lalu apa bedanya sama tipe data array?
    - tipe data array wajib membuat array terlebih dahulu sebelum mengirimkan ke function
    - varargs bisa langsung mengirimkan datanya dan di pisahkan dengan tanda koma 
- tapi apakah bisa kita kirim data array slice?
    - bisa
        - akan tetapi kita perlu menambahkan ... setelah declare variable nya

25. function as parameter
- melempar function di function paarameter
- function type decleration
    -biasanya ini di buat jika function parameternya terlalu panjang

26. AnonymousFunction
- function tanpa nama,biasanya digunakan untu langsung menulis function nya dan hanya sekali digunakan biasanya

27. RecursiveFunction
- Recursive function adalah function yang memanggil function dirinya sendiri
- terkadang ada beberapa case,permasalahan lebih mudah di selesaikan dengan recursive function. Contohnya adalah FACTORIAL

28. Closure
- function di dalam function 
- Jadi, di dalam function (disebut dengan outer) ada sebuah function (yang disebut dengan inner)

29. defer,panic dan recovery
- defer : untuk memanggil function terakhir,dari pada di taro bawah better di taro atas pake defer
- defer : kalo tidak pake defer dan kode programnya di taro paling bawah supaya jadi terakhir, ketika error dia tidak akan di panggil,karna sudah error terlebih dahulu
- panic : sendiri itu untuk memberhentikan program, jadi ketika panic program akan langsung terhenti
- recovery : mengambil nilai panic dan membuat program akan berjalan lagi

30. struct
- struct adalah kumpulan field (mirip sebuah class yang memiliki property saja cuman)

31. struct Method
- struct Method adalah function yang menempel di struct (kalo di OOP adalah function yang ada di dalam class)

32. interface
- interface adalah sebagai kontrak method yang ada di struct
- untuk menggunakan interface tinggal pasang saja di struct 
    - func (people People)=>nama struct  GetName()=>nama function interface     string {
        - type name interface {
            GetName() string
        }
